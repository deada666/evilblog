---
layout: post
title: "Об эстетике сборки программных продуктов"
date: 2015-05-04 09:36:03 +0300
comments: true
categories: [deployment, build]
---

В последнее время стало модно писать любой код включая вспомогательные файлы для сборки и прочий шлак, упаковывать в 
т.н. пакеты и публиковать куда-то. А далее пусть дорогие разработчики/пользователи это все качают и используют. Сегодня
я поговорю почему те, кто бездумно и не особо аккуратно использует эти вещи - мудаки.
<!-- more -->
Давайте посмотрим на ныне модный node.js и npm. Предположим мы наставили 100500 каких-то пакетов за 3 минуты, получили 20 мегабайт JavaScript, native библиотек и прочего говна и куда-то задеплоили. Проходит пол года или год. Продукт себе работал у заказчика и тут внезапно какой-то вирус поразил пакеты, да еще и баги развелись (предположим заказчик еще и на винде это все хостил). Заказчик находит себе свеженького фрилансера так как вы были заняты. И говорит: "у меня проблема". Этот фрилансер пробует подтянуть зависимости и тот оказывается, что их версии не прописаны... Совместимость была убита и ничего не работает. Более того пакетов было такое множество, что на каждый все проблемы нужно разгребать руками. И это еще хорошо если пакеты вообще были прописаны... А если их просто модный кул девелопер ставил комманд лайном, потом это все счастье залил на сервер и радуется.

Теперь давайте же перейдем к java + maven:

1. Мы не можем ставить зависимости в maven если они явно не прописаны в pom.xml (и это хорошо, уже обезопасили себя от одного эпик пиздеца)
2. Зависимости это в сущности jar - то есть собранные готовые к использованию библиотеки, а не помойка из пачки скриптов (даже с учетом того, что javascript скриптовый язык меня всегда поражала любовь говнодевов опубликовать все включая юнит тесты чтоб потом оно таскалось вместе с чужими приложениями и вся эта куча говна куда-то деплоилась).

Почему это плохо? (спросите вы)

1. Есть люди способные траблшутить, спустится на 1 уровень абстракции вниз и попробовать посмотреть контент этих файлов и разобраться чего у них не работает.
2. Есть ИДЕ, которые могут это все счастье индексировать чтоб как-то помочь разрабатывать. И ваши ЮНИТ-тесты и вспомогательный шлак для сборки никаким образом в этом не поможет, а только сделает хуже.

Давайте посмотрим на мой "любимый" .net и NuGet:

Видимо заразившись от JS хипстеров Майкрософт сделал NuGet столь крутым, что его смогли приспособить даже для деплоя десктоп приложений. Меня как человека любящего ограничения это сразу толкнуло на недоверие. И так, что же не так с NuGet.
Видите ли тул, который способен автоматически менять код конфигов и просто код это всегда опасно. Более того это вдвойне опасно для новичков, которых на самом деле в software development не мало. 
Например: NuGet пакет ставит файлы исходников и при апдейте их обновляет. Кто-то поправил эти исходники вручную, при следующем апдейте все пропало.
NuGet в одном проекте поставил в депенденси у депенденси сборку одной версии в другом другую. Я думаю не нужно объяснять чем это чревато.

Так о чем речь? Речь на самом деле не столько о пакетных менеджерах и их недостатках, а о том, что бездумно забивать в комманд лайн Install-Package очень плохо.

Нужно аккуратно управлять зависимостями, вести учет подключенных библиотек, не использовать все подряд только потому, что какой-то мудак на stackoverflow посоветовал. Я просто неоднократно видел как люди решают все проблемы установкой новой зависимости в свой продукт. Но чем больше у вас зависимостей тем меньше это ваш продукт. И тем больше у вас будет проблем в будущем. И не стоит мечтать о форках. Форки приведут к постоянным мерджам. И чем больше зависимостей тем все становится сложнее. Более того при потребности в 1% функционала пакета подумайте стоит ли его вообще ставить? Может лучше если он под MIT лицензией просто скопировать из гитхаба 1 класс если уж совсем лень?

И да, я знаю, что вы офигенные разработчики, а такая жесть бывает только в другой компании, городе, стране. Но почему же тогда shit happens?